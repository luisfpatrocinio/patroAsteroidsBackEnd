export type Player = {
    name: string;
    rankLevel: number;
    expPoints: number;
    bio: string;
    enemiesDestroyed: number;
    totalScore: number;
    highestScore: number;
    coinsCollected: number;
    avatarIndex: number;
    colorIndex: number;
};

// Banco de dados de jogadores
const playerDatabase: Player[] = [
    // roubei e joguei no playerDatabase
];

// Função para obter os dados de um jogador pelo nome
export function getPlayerData(playerName: string): Player | undefined {
    return playerDatabase.find(player => player.name === playerName);
}

// Função para atualizar a pontuação de um jogador
export function updatePlayerScore(playerName: string, score: number) {
    const _player = getPlayerData(playerName);
    if (_player) {
        _player.totalScore += score;
        _player.highestScore = Math.max(_player.highestScore, score);
    }
}

// Função para atualizar os inimigos destruídos por um jogador
export function updatePlayerDefeatedEnemies(playerName: string, enemiesDestroyed: number) {
    const _player = getPlayerData(playerName);
    if (_player) {
        _player.enemiesDestroyed += enemiesDestroyed;
    }
}

export function createNewPlayer(playerName: string): Player {
    const _data : Player = {
        name: playerName,
        rankLevel: 1,
        expPoints: 0,
        bio: "Novo Jogador",
        enemiesDestroyed: 0,
        totalScore: 0,
        highestScore: 0,
        coinsCollected: 0,
        avatarIndex: 1,
        colorIndex: 1
    };
    return _data;
}

export function addPlayerToDatabase(playerData: Player): void {
    playerDatabase.push(playerData);
}

export function getPlayersDatabase(): Player[] {
    return playerDatabase;
}


/**
 * Retrieves the leaderboard from the player database.
 *
 * This function sorts the players by their total score in descending order
 * and returns an array of simplified player objects containing only the
 * relevant fields: name, totalScore, and rankLevel.
 *
 * @returns {Array<{name: string, totalScore: number, rankLevel: number}>} 
 * An array of player objects sorted by total score.
 */
export function getLeaderBoard() {
    return playerDatabase
        // Sort players by total score in descending order
        .sort((a, b) => b.totalScore - a.totalScore)
        // Return only the relevant fields
        .map(player => ({
            name: player.name,
            totalScore: player.totalScore,
            rankLevel: player.rankLevel
        }));
}